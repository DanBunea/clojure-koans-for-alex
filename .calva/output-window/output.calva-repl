; This is the Calva REPL Window.
; It's just a file, really, with some special treatment from Calva.
; Use it as a REPL input prompt if you like. (When the REPL is connected.)
; TIPS: The keyboard shortcut `ctrl+alt+o r` shows and focuses this window
; Please see https://calva.io/repl-window/ for more info.
; Happy coding! ♥️

; TIPS: As with any Clojure file when the REPL is connected:
; - `alt+enter` evaluates the current top level form.
; - `ctrl+enter` evaluates the current form.
; Special for this file:
; - `alt+up` and `alt+down` traverse up and down the REPL command history
;    when the cursor is after the last contents at the prompt
; 
; See also the Calva Inspector: https://calva.io/inspector/

PLEASE NOTE
We will update the default location of this file.
The new default location will be
  "<projectRootPath>/.calva/repl.calva-repl"
For now the legacy path is used by default.
To give yourself a smooth transition, you can opt in
to the change, by configuring this setting as false:
  "calva.useLegacyReplWindowPath"
and then add "**/.calva/repl.calva-repl" to your ".gitignore" file.


This file is configured as the output destination for all REPL output.
You can configure this with the setting:
  "calva.outputDestinations"


; Jacking in...
; Connecting using "undefined" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Aborting jack-in. No project type selected.
; Jacking in...
; Connecting using "deps.edn" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Starting Jack-in Terminal: (cd /Users/danbunea/Projects/experiments/clojure-koans-for-alex; clojure -Sdeps '{:deps {nrepl/nrepl {:mvn/version,"1.1.1"},cider/cider-nrepl {:mvn/version,"0.47.1"}}}' -M -m nrepl.cmdline --middleware "[cider.nrepl/cider-middleware]")
; Using host:port localhost:62321 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉user꞉> 
"Please see https://calva.io/output/#about-stdout-in-the-repl-window
about why stdout printed to this file is prepended with `;` to be line comments."
clj꞉user꞉> 
; Jack-in done.
clj꞉user꞉> 
nil
clj꞉koans.02-strings꞉> 
; Execution error (ExceptionInfo) at koans.02-strings/eval8141 (REPL:5).
; A string is nothing more than text surrounded by double quotes
; (= __ "hello")
clj꞉koans.02-strings꞉> 
false
clj꞉koans.02-strings꞉> 
; Execution error (ExceptionInfo) at koans.02-strings/eval9323 (REPL:5).
; A string is nothing more than text surrounded by double quotes
; (= __ "hello")
clj꞉koans.02-strings꞉> 
; Execution error (ExceptionInfo) at koans.02-strings/eval9328 (REPL:5).
; But double quotes are just magic on top of something deeper
; (= __ (str (quote world)))
clj꞉koans.02-strings꞉> 
; Execution error (ExceptionInfo) at koans.03-lists/eval10435 (REPL:4).
; Lists can be expressed by function or a quoted form
; (= (quote (__ __ __ __ __)) (list 1 2 3 4 5))
clj꞉koans.03-lists꞉> 
; Execution error (ExceptionInfo) at koans.03-lists/eval10438 (REPL:4).
; Lists can be expressed by function or a quoted form
; (= (quote (__ __ __ __)) (list 1 2 3 4))
clj꞉koans.03-lists꞉> 
(:c :d)
clj꞉koans.03-lists꞉> 
(1 2 3 4)
clj꞉koans.03-lists꞉> 
"Sochi"
clj꞉koans.06-maps꞉> 
; Execution error (ExceptionInfo) at koans.06-1-nested-maps/eval10627 (REPL:4).
; You can look up the value for a given path
; (= __ (get-in {:x {:a 1, :b 2}} [:x :b]))
clj꞉koans.06-1-nested-maps꞉> 
{:x {:a 1, :b 2}, :y {:c 3}}
clj꞉koans.06-1-nested-maps꞉> 
false
clj꞉koans.06-1-nested-maps꞉> 
